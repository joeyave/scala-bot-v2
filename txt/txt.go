package txt

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
)

var locales = map[string]map[string]string{
	"button.schedule": {
		"ru": "üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
	},
	"button.menu": {
		"ru": "üíª –ú–µ–Ω—é",
	},
	"button.songs": {
		"ru": "üéµ –ü–µ—Å–Ω–∏",
	},
	"button.stats": {
		"ru": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
	},
	"button.settings": {
		"ru": "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
	},
	"button.next": {
		"ru": "‚Üí",
	},
	"button.prev": {
		"ru": "‚Üê",
	},
	"button.eventsWithMe": {
		"ru": "üôã‚Äç‚ôÇÔ∏è",
	},
	"button.archive": {
		"ru": "üì•",
	},
	"button.like": {
		"ru": "‚ù§Ô∏è‚Äçüî•",
	},
	"button.calendar": {
		"ru": "üìÜ",
	},
	"button.numbers": {
		"ru": "üî¢",
	},
	"button.tag": {
		"ru": "üîñ",
	},
	"button.globalSearch": {
		"ru": "üîé –ò—Å–∫–∞—Ç—å –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö",
	},
	"button.cancel": {
		"ru": "üö´ –û—Ç–º–µ–Ω–∞",
	},
	"button.skip": {
		"ru": "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
	},
	"button.createDoc": {
		"ru": "‚ûï –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç",
	},
	"button.createEvent": {
		"ru": "  –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—Ä–∞–Ω–∏–µ",
	},
	"button.chords": {
		"ru": "üé∂ –ê–∫–∫–æ—Ä–¥—ã",
	},
	"button.metronome": {
		"ru": "ü•Å –ú–µ—Ç—Ä–æ–Ω–æ–º",
	},
	"button.edit": {
		"ru": "‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
	},

	"text.defaultPlaceholder": {
		"ru": "–§—Ä–∞–∑–∞ –∏–∑ –ø–µ—Å–Ω–∏ –∏–ª–∏ —Å–ø–∏—Å–æ–∫",
	},
	"text.chooseEvent": {
		"ru": "–í—ã–±–µ—Ä–∏ —Å–æ–±—Ä–∞–Ω–∏–µ:",
	},
	"text.chooseTag": {
		"ru": "–í—ã–±–µ—Ä–∏ —Ç–µ–≥:",
	},
	"text.chooseSong": {
		"ru": "–í—ã–±–µ—Ä–∏ –ø–µ—Å–Ω—é:",
	},
	"text.chooseSongOrTypeAnotherQuery": {
		"ru": "–í—ã–±–µ—Ä–∏ –ø–µ—Å–Ω—é –ø–æ –∑–∞–ø—Ä–æ—Å—É %s –∏–ª–∏ –≤–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
	},
	"text.nothingFound": {
		"ru": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
	},
	"text.nothingFoundByQuery": {
		"ru": "–ü–æ –∑–∞–ø—Ä–æ—Å—É %s –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ —ç—Ç—É –ø–µ—Å–Ω—é.",
	},
	"text.menu": {
		"ru": "–ú–µ–Ω—é:",
	},
}

func init() {
	for key, langToMsgMap := range locales {
		for lang, msg := range langToMsgMap {
			message.SetString(language.Make(lang), key, msg)
		}
	}
}

func Get(key, lang string, a ...interface{}) string {
	//switch lang {
	//case "en":
	//	return enPrinter.Sprintf(key, a)
	//case "uk":
	//	return ukPrinter.Sprintf(key, a)
	//}
	return ruPrinter.Sprintf(key, a)
}

//var ukPrinter = message.NewPrinter(language.Ukrainian)
//var enPrinter = message.NewPrinter(language.English)
var ruPrinter = message.NewPrinter(language.Russian)
